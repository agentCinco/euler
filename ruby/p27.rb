#Project Euler problem 27
#
#Considering quadratics of the form:
#
#n^2 + an + b, where |a|  1000 and |b|  1000
#

require "mathn"

primes = []
high = 0
tally = 0
high_array = []

ab_primes = [-2, -3, -5, -7, -11, -13, -17, -19, -23, -29, -31, -37, -41, -43, -47, -53, -59, -61, -67, -71, -73, -79, -83, -89, -97, -101, -103, -107, -109, -113, -127, -131, -137, -139, -149, -151, -157, -163, -167, -173, -179, -181, -191, -193, -197, -199, -211, -223, -227, -229, -233, -239, -241, -251, -257, -263, -269, -271, -277, -281, -283, -293, -307, -311, -313, -317, -331, -337, -347, -349, -353, -359, -367, -373, -379, -383, -389, -397, -401, -409, -419, -421, -431, -433, -439, -443, -449, -457, -461, -463, -467, -479, -487, -491, -499, -503, -509, -521, -523, -541, -547, -557, -563, -569, -571, -577, -587, -593, -599, -601, -607, -613, -617, -619, -631, -641, -643, -647, -653, -659, -661, -673, -677, -683, -691, -701, -709, -719, -727, -733, -739, -743, -751, -757, -761, -769, -773, -787, -797, -809, -811, -821, -823, -827, -829, -839, -853, -857, -859, -863, -877, -881, -883, -887, -907, -911, -919, -929, -937, -941, -947, -953, -967, -971, -977, -983, -991, -997, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]

Prime.each() do |prime|
  if prime < 99999
    primes << prime
  else
    break
  end
end
puts "Done baking Primes! Last one was #{primes[-1]}"

(-61..-59).step(2) do |a|

  #if ab_primes.include?(a)
  puts "Prime coefficient a = #{a}"
  1.upto(1000) do |b|
    if ab_primes.include?(b)
      #puts "Prime coefficient b = #{b}"
      tally = 0

      0.upto(600) do |n|
        #puts "n = #{n}"
        if primes.include?(n ** 2 + a * n + b)
          tally += 1
        end
      end

      if tally > high
        puts "New high score #{tally}"
        high = tally
        high_array.clear
        high_array << a
        high_array << b
        #end
      end
    end
  end
end

puts "The high score is: #{high}"
puts "The coefficients are a = #{high_array[0]}, b = #{high_array[1]}"
